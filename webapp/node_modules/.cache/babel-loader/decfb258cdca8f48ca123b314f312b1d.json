{"ast":null,"code":"var _jsxFileName = \"/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cards, setCards] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n  useEffect(() => {\n    api.ConnectApi().then(response => {\n      if (response.status === 200) {\n        const cards = response.data.cards;\n        setCardsTarot(cards);\n        setPathCard({\n          url: response.data.imagesUrl,\n          cardBack: response.data.imageBackCard\n        });\n      }\n    }).catch(error => console.log(error));\n  }, []);\n\n  const CardTurn = id => {\n    let index = cardsTarot.findIndex(card => card.id === id);\n    const newCardsTarot = [...cardsTarot];\n    newCardsTarot[index].flipped = !newCardsTarot[index].flipped;\n    setCardsTarot(newCardsTarot);\n  };\n\n  const GameInit = () => {\n    setCardsTarot(shuffle(filterCard));\n    cardsTarot.forEach(item => {\n      CardTurn(item.id);\n    });\n    let isCardTurn = cardsTarot.filter(item => item.flipped);\n    if (isCardTurn.length <= 1) return cardsTarot.forEach(item => {\n      CardTurn(item.id);\n    });\n  };\n\n  const filterCard = cardsTarot.filter(({\n    image\n  }) => image !== undefined);\n\n  const GameStart = () => {};\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(ButtonGame, {\n    GameInit: GameInit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row cards-table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, filterCard.map(({\n    name,\n    image\n  }) => React.createElement(CardsTarot, {\n    key: index,\n    name: name,\n    image: image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }))));\n};\n\nexport default CardTable;","map":{"version":3,"sources":["/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js"],"names":["React","useState","useEffect","shuffle","api","CardsTarot","ButtonGame","CardTable","cards","setCards","pathCard","setPathCard","ConnectApi","then","response","status","data","setCardsTarot","url","imagesUrl","cardBack","imageBackCard","catch","error","console","log","CardTurn","id","index","cardsTarot","findIndex","card","newCardsTarot","flipped","GameInit","filterCard","forEach","item","isCardTurn","filter","length","image","undefined","GameStart","map","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cards, setCards] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n\n  useEffect(() => {\n    api.ConnectApi()\n      .then(response => {\n        if (response.status === 200) {\n          const cards = response.data.cards;\n          setCardsTarot(cards);\n          setPathCard({ url: response.data.imagesUrl, cardBack: response.data.imageBackCard });\n        }\n      })\n      .catch(error => console.log(error))\n  }, [])\n\n  const CardTurn = (id) => {\n    let index = cardsTarot.findIndex(card => card.id === id);\n    const newCardsTarot = [...cardsTarot];\n    newCardsTarot[index].flipped = !newCardsTarot[index].flipped;\n    setCardsTarot(newCardsTarot);\n  }\n\n  const GameInit = () => {\n    setCardsTarot(shuffle(filterCard));\n    cardsTarot.forEach(item => { CardTurn(item.id) });\n    let isCardTurn = cardsTarot.filter(item => item.flipped);\n    if (isCardTurn.length <= 1) return cardsTarot.forEach(item => { CardTurn(item.id) });\n  }\n\n  const filterCard = cardsTarot.filter(({ image }) => image !== undefined);\n\n  const GameStart = () => {  \n\n  }\n\n\n  return (\n    <div className=\"container\">\n      <ButtonGame GameInit={GameInit} />\n      <div className=\"row cards-table\">\n        {filterCard\n          .map(({name, image}) =>\n            <CardsTarot\n              key={index}\n              name={name}\n              image={image}\n            />\n          )}\n      </div>\n    </div>\n  )\n}\n\nexport default CardTable;"]},"metadata":{},"sourceType":"module"}