{"ast":null,"code":"var _jsxFileName = \"/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cardsTarot, setCardsTarot] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n  useEffect(() => {\n    api.ConnectApi().then(response => {\n      if (response.status === 200) {\n        const cards = response.data.cards.map((item, index) => ({ ...item,\n          flipped: false,\n          id: index\n        }));\n        setCardsTarot(cards);\n        setPathCard({\n          url: response.data.imagesUrl,\n          cardBack: response.data.imageBackCard\n        });\n      }\n    }).catch(error => console.log(error));\n  }, []);\n\n  const CardTurn = id => {\n    let index = cardsTarot.findIndex(card => card.id === id);\n    const newCardsTarot = [...cardsTarot];\n    newCardsTarot[index].flipped = !newCardsTarot[index].flipped;\n    setCardsTarot(newCardsTarot);\n  };\n\n  const GameInit = () => {\n    setCardsTarot(shuffle(filterCard));\n    cardsTarot.forEach(item => {\n      CardTurn(item.id);\n    });\n    let isCardTurn = cardsTarot.filter(item => item.flipped);\n    if (isCardTurn.length <= 1) return cardsTarot.forEach(item => {\n      CardTurn(item.id);\n    });\n  };\n\n  const filterCard = cardsTarot.filter(({\n    image\n  }) => image !== undefined);\n\n  const GameStart = () => {};\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(ButtonGame, {\n    GameInit: GameInit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row cards-table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, filterCard.map(({\n    name,\n    image\n  }) => React.createElement(CardsTarot, {\n    key: index,\n    name: name,\n    image: image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }))));\n};\n\nexport default CardTable;","map":{"version":3,"sources":["/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js"],"names":["React","useState","useEffect","shuffle","api","CardsTarot","ButtonGame","CardTable","cardsTarot","setCardsTarot","pathCard","setPathCard","ConnectApi","then","response","status","cards","data","map","item","index","flipped","id","url","imagesUrl","cardBack","imageBackCard","catch","error","console","log","CardTurn","findIndex","card","newCardsTarot","GameInit","filterCard","forEach","isCardTurn","filter","length","image","undefined","GameStart","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cardsTarot, setCardsTarot] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n\n  useEffect(() => {\n    api.ConnectApi()\n      .then(response => {\n        if (response.status === 200) {\n          const cards = response.data.cards.map(\n            (item, index) => ({ ...item, flipped: false, id: index })\n          );\n          setCardsTarot(cards);\n          setPathCard({ url: response.data.imagesUrl, cardBack: response.data.imageBackCard });\n        }\n      })\n      .catch(error => console.log(error))\n  }, [])\n\n  const CardTurn = (id) => {\n    let index = cardsTarot.findIndex(card => card.id === id);\n    const newCardsTarot = [...cardsTarot];\n    newCardsTarot[index].flipped = !newCardsTarot[index].flipped;\n    setCardsTarot(newCardsTarot);\n  }\n\n  const GameInit = () => {\n    setCardsTarot(shuffle(filterCard));\n    cardsTarot.forEach(item => { CardTurn(item.id) });\n    let isCardTurn = cardsTarot.filter(item => item.flipped);\n    if (isCardTurn.length <= 1) return cardsTarot.forEach(item => { CardTurn(item.id) });\n  }\n\n  const filterCard = cardsTarot.filter(({ image }) => image !== undefined);\n\n  const GameStart = () => {  \n\n  }\n\n\n  return (\n    <div className=\"container\">\n      <ButtonGame GameInit={GameInit} />\n      <div className=\"row cards-table\">\n        {filterCard\n          .map(({name, image}) =>\n            <CardsTarot\n              key={index}\n              name={name}\n              image={image}\n            />\n          )}\n      </div>\n    </div>\n  )\n}\n\nexport default CardTable;"]},"metadata":{},"sourceType":"module"}