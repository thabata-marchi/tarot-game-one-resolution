{"ast":null,"code":"var _jsxFileName = \"/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cardsTarot, setCardsTarot] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n  const [gameIsStart, setGameIsStart] = useState(false);\n  const [cardSelected, setCardSelected] = useState(\"\");\n  const [oneCard, setOneCard] = useState(false);\n  useEffect(() => {\n    api.ConnectApi().then(response => {\n      if (response.status === 200) {\n        const cards = response.data.cards;\n        setCardsTarot(cards);\n        setPathCard({\n          url: response.data.imagesUrl,\n          cardBack: response.data.imageBackCard\n        });\n      }\n    }).catch(error => console.log(error));\n  }, []);\n  const filterCard = cardsTarot.filter(({\n    image\n  }) => image !== undefined);\n\n  const StartGame = () => {\n    setCardsTarot(shuffle(filterCard));\n    setGameIsStart(true);\n    setOneCard(false);\n    setCardSelected(\"\");\n  };\n\n  const SelectCard = card => {\n    return eSelect => {\n      if (!gameIsStart || cardSelected && cardSelected === card) return setOneCard(true);\n      if (!gameIsStart || cardSelected) return console.log(\"OKKKK\");\n      console.log(card);\n      setCardSelected(card);\n    };\n  };\n\n  const PathImage = image => {\n    if (oneCard && cardSelected && cardSelected === image) return StartGame();\n    if (gameIsStart && !cardSelected) return pathCard.cardBack;\n    if (cardSelected && cardSelected === image) return pathCard.url + image;\n    if (cardSelected && cardSelected !== image) return pathCard.cardBack;\n    return pathCard.url + image;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(ButtonGame, {\n    StartGame: StartGame,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"row cards-table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, filterCard.map(({\n    name,\n    image\n  }, index) => React.createElement(CardsTarot, {\n    key: index,\n    name: name,\n    image: PathImage(image),\n    SelectCard: SelectCard(image),\n    isSelected: !oneCard && cardSelected === image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }))));\n};\n\nexport default CardTable;","map":{"version":3,"sources":["/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js"],"names":["React","useState","useEffect","shuffle","api","CardsTarot","ButtonGame","CardTable","cardsTarot","setCardsTarot","pathCard","setPathCard","gameIsStart","setGameIsStart","cardSelected","setCardSelected","oneCard","setOneCard","ConnectApi","then","response","status","cards","data","url","imagesUrl","cardBack","imageBackCard","catch","error","console","log","filterCard","filter","image","undefined","StartGame","SelectCard","card","eSelect","PathImage","map","name","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cardsTarot, setCardsTarot] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n\n  const [gameIsStart, setGameIsStart] = useState(false);\n  const [cardSelected, setCardSelected] = useState(\"\");\n\n  const [oneCard, setOneCard] = useState(false);\n\n  useEffect(() => {\n    api.ConnectApi()\n      .then(response => {\n        if (response.status === 200) {\n          const cards = response.data.cards;\n          setCardsTarot(cards);\n          setPathCard({ url: response.data.imagesUrl, cardBack: response.data.imageBackCard });\n        }\n      })\n      .catch(error => console.log(error))\n  }, [])\n\n  const filterCard = cardsTarot.filter(({ image }) => image !== undefined);\n\n  const StartGame = () => {  \n    setCardsTarot(shuffle(filterCard));\n    setGameIsStart(true);\n    setOneCard(false);\n    setCardSelected(\"\");\n  }\n\n  const SelectCard = card => {\n    return eSelect => {\n      if( !gameIsStart || cardSelected && cardSelected === card ) return setOneCard(true);\n      if( !gameIsStart || cardSelected ) return console.log(\"OKKKK\")\n      console.log(card);\n      setCardSelected(card)\n    }\n  }\n\n  const PathImage = image => {\n    if(oneCard && cardSelected && cardSelected === image) return StartGame();\n    if(gameIsStart && !cardSelected) return pathCard.cardBack;\n    if(cardSelected && cardSelected === image) return pathCard.url + image;    \n    if(cardSelected && cardSelected !== image) return pathCard.cardBack;\n    return pathCard.url + image;\n  }\n\n  return (\n    <div className=\"container\">\n      <ButtonGame StartGame={StartGame} />\n      <div className=\"row cards-table\">\n        {filterCard\n          .map(({name, image}, index) =>\n            <CardsTarot\n              key={index}\n              name={name}\n              image={PathImage(image)}\n              SelectCard={SelectCard(image)}\n              isSelected={!oneCard && cardSelected === image}\n            />\n          )}\n      </div>\n    </div>\n  )\n}\n\nexport default CardTable;"]},"metadata":{},"sourceType":"module"}