{"ast":null,"code":"var _jsxFileName = \"/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [cardsTarot, setCardsTarot] = useState([]);\n  const [pathCard, setPathCard] = useState([]);\n  useEffect(() => {\n    api.ConnectApi().then(response => {\n      if (response.status === 200) {\n        const cards = response.data.cards.map((item, index) => ({ ...item,\n          flipped: false,\n          id: index\n        }));\n        setCardsTarot(cards);\n        setPathCard({\n          url: response.data.imagesUrl,\n          cardBack: response.data.imageBackCard\n        });\n      }\n    }).catch(error => console.log(error));\n  }, []);\n\n  const CardTurn = id => {\n    let index = cardsTarot.findIndex(card => card.id === id);\n    const newCardsTarot = [...cardsTarot];\n    newCardsTarot[index].flipped = !newCardsTarot[index].flipped;\n    setCardsTarot(newCardsTarot);\n  };\n\n  const GameInit = () => {\n    setCardsTarot(shuffle(filterCard));\n    cardsTarot.forEach(item => {\n      CardTurn(item.id);\n    });\n    let isCardTurn = cardsTarot.filter(item => item.flipped);\n    if (isCardTurn.length <= 1) return cardsTarot.forEach(item => {\n      CardTurn(item.id);\n    });\n  };\n\n  const filterCard = cardsTarot.filter(({\n    image\n  }) => image !== undefined);\n\n  const ShowCard = () => React.createElement(\"div\", {\n    className: \"row cards-table\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, filterCard.map(({\n    name,\n    image,\n    flipped,\n    id\n  }, index) => React.createElement(CardsTarot, {\n    key: index,\n    index: index,\n    name: name,\n    image: image,\n    flipped: flipped,\n    id: id,\n    pathCard: pathCard,\n    setPathCard: setPathCard,\n    cardsTarot: cardsTarot,\n    CardTurn: CardTurn,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })));\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(ButtonGame, {\n    GameInit: GameInit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(ShowCard, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }));\n};\n\nexport default CardTable;","map":{"version":3,"sources":["/Users/thabatamarchi/Documents/Testes/tarot-game-one-resolution/webapp/src/components/CardTable/index.js"],"names":["React","useState","useEffect","shuffle","api","CardsTarot","ButtonGame","CardTable","cardsTarot","setCardsTarot","pathCard","setPathCard","ConnectApi","then","response","status","cards","data","map","item","index","flipped","id","url","imagesUrl","cardBack","imageBackCard","catch","error","console","log","CardTurn","findIndex","card","newCardsTarot","GameInit","filterCard","forEach","isCardTurn","filter","length","image","undefined","ShowCard","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport shuffle from 'shuffle-array';\nimport api from '../../services/api';\nimport './CardTable.css';\nimport CardsTarot from '../CardsTarot';\nimport ButtonGame from '../ButtonGame';\n\nconst CardTable = () => {\n  const [ cardsTarot, setCardsTarot ] = useState([]);\n  const [ pathCard, setPathCard ] = useState([]);\n\n  useEffect(() => {\n    api.ConnectApi()\n    .then(response => {\n      if( response.status === 200 ){\n        const cards = response.data.cards.map(\n          (item, index) => ({...item, flipped: false, id: index})\n        );\n        setCardsTarot(cards);\n        setPathCard({url: response.data.imagesUrl, cardBack: response.data.imageBackCard});\n      }\n  })\n    .catch( error => console.log( error) )\n  }, [])  \n\n  const CardTurn = (id) => {\n    let index = cardsTarot.findIndex( card => card.id === id );\n    const newCardsTarot = [ ... cardsTarot ];\n          newCardsTarot[index].flipped = !newCardsTarot[index].flipped;    \n    setCardsTarot(newCardsTarot);\n  }\n\n  const GameInit = () => {\n    setCardsTarot(shuffle(filterCard));\n    cardsTarot.forEach( item => { CardTurn(item.id) });\n    let isCardTurn = cardsTarot.filter( item => item.flipped );    \n    if( isCardTurn.length <= 1 ) return cardsTarot.forEach( item => { CardTurn(item.id) });\n  }\n\n  const filterCard = cardsTarot.filter(({image}) => image !== undefined);\n  const ShowCard = () => \n    <div className=\"row cards-table\">\n      {filterCard\n        .map(({name, image, flipped, id}, index) => \n          <CardsTarot \n          key={index}\n          index={index} \n          name={name}\n          image={image}\n          flipped={flipped}\n          id={id}\n          pathCard={pathCard}\n          setPathCard={setPathCard}\n          cardsTarot={cardsTarot}\n          CardTurn={CardTurn}   \n        />\n      )}\n    </div>\n\n\n  return(\n    <div className=\"container\">   \n      <ButtonGame GameInit={GameInit} />\n      <ShowCard />\n    </div>\n  ) \n}\n\nexport default CardTable;"]},"metadata":{},"sourceType":"module"}